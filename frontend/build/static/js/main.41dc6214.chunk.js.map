{"version":3,"sources":["services/ChatService.js","components/Login.jsx","components/ChatWindow.jsx","App.jsx","serviceWorker.js","index.js"],"names":["this","messageList","userList","url","token","username","password","clearToken","Promise","resolve","reject","form","FormData","append","console","log","fetch","method","body","then","res","status","json","err","source","name","handler","addEventListener","event","data","JSON","parse","callback","users","Set","findIndex","el","user","push","type","time","date_format","created","list","i","splice","timestamp","date","Date","toLocaleDateString","toLocaleTimeString","msg","message","onDisconnect","onError","EventSource","_bindListener","initUsers","bind","addUser","deleteUser","addServerStatus","close","addMessage","target","readyState","headers","Headers","Login","props","onSubmit","preventDefault","ChatService","login","state","afterLogin","alert","onChange","setState","id","value","Dialog","open","DialogTitle","className","TextField","variant","margin","required","fullWidth","label","autoFocus","defaultValue","Button","color","React","Component","ChatWindow","scrollToBottom","setTimeout","messagesEnd","scrollIntoView","behavior","onDataUpdate","onInputChange","onSend","send","listen","Item","item","map","index","key","style","float","clear","ref","App","loginCallback","isSuccess","isLoggedIn","content","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.41dc6214.chunk.js","sourcesContent":["\nclass ChatService {\n\tconstructor() {\n\t\tthis.messageList = []\n\t\tthis.userList = []\n\n\t\tthis.url = ''\n\t\tthis.token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZâ€¦3QifQ.AoSHHKEybm7_OLNLUtYHa8zt_9HBOUawbyqPaBU9BNc'\n\t}\n\tclearToken() {\n\t\tthis.messageList = []\n\t\tthis.userList = []\n\t\tthis.token = ''\n\t}\n\t\n\tlogin(url, username, password) {\n\t\tthis.clearToken()\n\t\tthis.url = url\n\t\t\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tvar form = new FormData();\n\t\t\tform.append(\"password\", password);\n\t\t\tform.append(\"username\", username);\n\n\t\t\tconsole.log('[ChatService] login start')\n\n\t\t\tfetch(this.url + \"/login\", {\n\t\t\t\tmethod: 'POST',\n\t\t\t\tbody: form\n\t\t\t}).then(\n\t\t\t\tres => {\n\n\t\t\t\t\tconsole.log('[ChatService] login response:', res)\n\n\t\t\t\t\tif (res.status === 201) {\n\t\t\t\t\t\tres.json().then(body => {\n\t\t\t\t\t\t\tconsole.log('[ChatService login get body:', body)\n\t\t\t\t\t\t\tthis.token = body.token\n\t\t\t\t\t\t\tresolve(true)\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (res.status === 403) {\n\t\t\t\t\t\treject(\"Invalid username or password\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(\"fail to /login, status:\", res.status);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\terr => {\n\t\t\t\t\treject(err)\n\t\t\t\t}\n\t\t\t)\n\t\t})\n\t}\t\n\t_bindListener(source, name, handler) {\n\t\tsource.addEventListener(name, event => {\n\t\t\t// console.log(`EventSource[${name}]:`, handler)\n\n\t\t\tvar data = JSON.parse(event.data);\n\t\t\t// var origin = event.origin;\n\t\t\t// var lastEventId = event.lastEventId;\n\t\t\thandler(data)\n\t\t\tthis.callback({\n\t\t\t\tmessageList: this.messageList,\n\t\t\t\tuserList: this.userList\n\t\t\t})\n\t\t}, false);\n\t}\n\tinitUsers(data) {\n\t\tlet users = new Set(data.users)\n\t\tthis.userList = [...users]\n\t}\n\taddUser(data) {\n\t\tif (this.userList.findIndex( el => el == data.user) >= 0) {\n\t\t\treturn;\n\t\t}\n\t\tthis.userList.push(data.user)\n\t\tthis.messageList.push({\n\t\t\ttype: 'join',\n\t\t\ttime: this.date_format(data.created),\n\t\t\tuser: data.user\n\t\t})\n\t}\n\tdeleteUser(data) {\n\t\tlet user = data.user\n\t\tlet list = this.userList\n\t\tfor(var i in list){\n\t\t    if(list[i] == user){\n\t\t        list.splice(i,1);\n\t\t        break;\n\t\t    }\n\t\t}\n\t\tthis.messageList.push({\n\t\t\ttype: 'part',\n\t\t\ttime: this.date_format(data.created),\n\t\t\tuser: data.user\n\t\t})\n    }\n    date_format(timestamp) {\n\t    var date = new Date(timestamp * 1000);\n\t    return (\n\t        date.toLocaleDateString(\"en-US\") +\n\t        \" \" +\n\t        date.toLocaleTimeString(\"en-US\")\n\t    );\n\t}\n\taddServerStatus(data) {\n\t\tthis.messageList.push({\n\t\t\ttype: 'status',\n\t\t\ttime: this.date_format(data.created),\n\t\t\tstatus: data.status\n\t\t})\n\t}\n\taddMessage(data) {\n\t\t// console.log('addMessage:', this)\n\t\tthis.messageList.push({\n\t\t\ttype: 'msg',\n\t\t\ttime: this.date_format(data.created),\n\t\t\tuser: data.user,\n\t\t\tmsg: data.message\n\t\t})\n\n\t}\n\tlisten(callback, onDisconnect, onError) {\n\t\tconsole.log('[ChatService] listen')\n\t\tthis.callback = callback\n\t\tvar source = new EventSource(this.url + '/stream/' + this.token);\n\t\t// source.onopen = function (event) {\n\t\t// \tconsole.log('onopen:', event)\n\t\t// };\n\n\t\tthis._bindListener(source, 'Users', this.initUsers.bind(this))\n\t\tthis._bindListener(source, 'Join', this.addUser.bind(this))\n\t\tthis._bindListener(source, 'Part', this.deleteUser.bind(this))\n\t\tthis._bindListener(source, 'ServerStatus', this.addServerStatus.bind(this))\n\t\tthis._bindListener(source, 'Disconnect', () => {\n\t\t\tsource.close()\n\t\t\tonDisconnect()\n\t\t})\n\t\tthis._bindListener(source, 'Message', this.addMessage.bind(this))\n\n\t\tsource.addEventListener(\n\t\t\t\"error\",\n\t\t\tevent => {\n\t\t\t\tif (event.target.readyState == 2) {\n                \tthis.clearToken()\n                \tonDisconnect()\n            \t}\n\t\t\t},\n\t\t\tfalse\n\t\t);\n\t}\n\tsend(message) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tvar form = new FormData()\n\t\t\tform.append(\"message\", message)\n\n\t\t\tvar headers = new Headers()\n\t\t\theaders.append(\"Authorization\", `Bearer ${this.token}`)\n\n\n\t\t\tconsole.log('[ChatService] send:', message)\n\n\t\t\tfetch(this.url + \"/message\", {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: headers,\n\t\t\t\tbody: form\n\t\t\t}).then(\n\t\t\t\tres => {\n\t\t\t\t\tresolve(res)\n\t\t\t\t},\n\t\t\t\terr => {\n\t\t\t\t\treject(err)\n\t\t\t\t}\n\t\t\t)\n\t\t})\n\t}\n}\n\nexport default new ChatService();","import React from 'react';\nimport ChatService from '../services/ChatService'\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      url: \"http://chat.cs291.com\",\n      username: \"test\",\n      password: \"test\"\n    };\n  }\n\n  onSubmit = event => {\n    event.preventDefault();\n    console.log('submit')\n    ChatService.login(this.state.url, this.state.username, this.state.password).then(\n      res => {\n        this.props.afterLogin(true)\n      },\n      err => {\n        alert(err)\n      }\n    )\n  };\n\n  onChange = event => {\n    console.log(event)\n    this.setState({ [event.target.id]: event.target.value });\n  };\n\n  render() {\n    return (\n      <Dialog open>\n        <DialogTitle>Enter Server URL to login</DialogTitle>\n        <div className=\"login-modal\">\n          <form onSubmit={this.onSubmit}>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"url\"\n              label=\"URL\"\n              autoFocus\n              defaultValue={this.state.url}\n              onChange = {this.onChange}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"username\"\n              label=\"Username\"\n              defaultValue={this.state.username}\n              onChange = {this.onChange}\n            />\n            <br/>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              defaultValue={this.state.password}\n              onChange = {this.onChange}\n            />\n            <br/>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              LOGIN\n            </Button>\n          </form>\n        </div>\n      </Dialog>\n    )\n  }\n}\n\nexport default Login;\n","import React from 'react';\nimport ChatService from '../services/ChatService'\n\nclass ChatWindow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      message: '',\n      userList: [],\n      messageList: []\n    };\n    ChatService.listen(this.onDataUpdate, this.onDisconnect)\n  }\n\n  scrollToBottom = () => {\n    console.log('scrollToBottom')\n     setTimeout(() => {\n       this.messagesEnd && this.messagesEnd.scrollIntoView({ behavior: \"auto\" })\n     }, 0)\n  }\n  onDataUpdate = data => {\n    // console.log('[ChatWindow] onDataUpdate:', data)\n    this.setState({\n      userList: data.userList,\n      messageList: data.messageList\n    })\n    if (data.messageList) {\n      this.scrollToBottom()\n    }\n  }\n  onDisconnect = () => {\n    this.props.onDisconnect()\n  }\n\n  onInputChange = event => {\n    this.setState({ message: event.target.value })\n  }\n  onSend = event => {\n    event.preventDefault();\n\n    ChatService.send(this.state.message).then(\n      res => {\n        this.setState({message: ''})\n      }\n    )\n  }\n\n  render() {\n    function Item(props) {\n      let item = props.item\n      switch (item.type) {\n        case 'status':\n          return (\n            <li className=\"status-item\">\n                <p className=\"time\">{item.time} [STATUS]: {item.status}</p>\n            </li>\n           )\n        case 'join':\n          return (\n            <li className=\"status-item\">\n                <p className=\"time\">{item.time} [JOIN]: {item.user}</p>\n            </li>\n           )\n        case 'part':\n          return (\n            <li className=\"status-item\">\n                <p className=\"time\">{item.time} [PART]: {item.user}</p>\n            </li>\n           )\n        case 'msg':\n          return (\n            <li className=\"item\">\n              <p className=\"time\">{item.time} {item.user}:</p>\n              <p className=\"message\">{item.msg}</p>\n            </li>\n          )\n        default:\n          return <li />\n      }\n    }\n\n    return (\n      <div className=\"chat-window\">\n        <div className=\"left\">\n          <div className=\"top\">\n            <ul className=\"message-list\">\n              {this.state.messageList.map((item, index) => (\n                <Item key={index} item={item} />\n              ))}\n              <div style={{ float:\"left\", clear: \"both\" }}\n               ref={(el) => { this.messagesEnd = el; }}>\n              </div>\n            </ul>\n          </div>\n          <div className=\"bottom\">\n            <form className=\"input-form\" onSubmit={this.onSend}>\n              <input \n                name=\"message\"\n                type=\"text\"\n                onChange={this.onInputChange}\n                value={this.state.message}\n              />\n              <button type=\"submit\">send</button>\n            </form>\n          </div>\n        </div>\n        <div className=\"right\">\n          <ul className=\"user-list\">\n            {this.state.userList.map((item, index) => (\n              <li key={index}>{item}</li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ChatWindow;\n","import React from 'react';\nimport './css/App.scss';\nimport Login from './components/Login'\nimport ChatWindow from './components/ChatWindow'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isLoggedIn: false };\n  }\n\n  loginCallback = isSuccess => {\n    isSuccess && this.setState({isLoggedIn: true})\n  }\n  onDisconnect = () => {\n    this.setState({isLoggedIn: false})\n  }\n\n  render() {\n    console.log('[App] render')\n    let content;\n    if (this.state.isLoggedIn) {\n      content = <ChatWindow onDisconnect={this.onDisconnect}/>\n    } else {\n      content = <Login afterLogin={this.loginCallback}/>\n    }\n    return (\n        <div className=\"App\">\n          <div className={this.state.isLoggedIn ? \"content\" : \"content snow\"}>\n           {content}\n          </div>\n          <div className=\"logo\">@CS291A</div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}